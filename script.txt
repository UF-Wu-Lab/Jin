*** k-mer analysis 

module load kmc/3.2.1  
$ mkdir tmp
$ ls *.fastq > FILES
$ kmc -k21 -t10 -m64 -ci1 -cs10000 @FILES reads tmp/

$ kmc_tools transform reads histogram reads.histo -cx10000


*** hifiasm assembly (-l 0 to 3 for different purge levels)

hifiasm -o Haden -t 12 -l 3 m64310e_230506_034722.hifi_reads.filt.fastq.gz --primary

*** gfa to fa
awk '/^S/{print ">"$2"\n"$3}' Haden.a_ctg.gfa | fold > Haden.a_ctg.fa 


*** HiCanu Assembly

canu -p mango -d haden_hifi genomeSize=350m -pacbio-hifi /blue/xingbo.wu/share/mango/Haden/m64310e_230506_034722.hifi_reads.filt.fastq.gz

*** convert gfa to fasta (-w line width)

awk '/^S/ {print ">"$2"\n"$3}' hifiasm.asm.bp.p_ctg.gfa | seqkit seq -w 60 > Haden.hifi_assembled.fasta

*** ragtag scaffolding

ragtag.py scaffold <reference_genome.fasta> Haden.p_ctg.fa -o Haden_assembly -t 12 


*** A Telomere Identification toolKit (tidk)

conda create -n tidk_env -c bioconda tidk

conda activate tidk_env

tidk search --string AAACCCT --output tidk_output --dir ./ ragtag.scaffold.fasta

** plot

tidk plot --tsv tidk_output_telomeric_repeat_windows.tsv

**** get chr form ragtag.scaffold.fasta

#!/bin/bash

# Create the ./chr directory if it doesn't exist
mkdir -p ./chr

# Loop through chromosome numbers 1 to 20
for i in {1..20}; do
  head -$((2 * i)) ragtag.scaffold.fasta | tail -2 > ./chr/ch$i
done

**** extract sequence containing telomere from fastq file

# Extract lines from FASTQ file
grep -B 1 'AGGGTTTAGGGTTTAGGGTTTAGGGTTT' m64310e_230506_034722.hifi_reads.fastq | sed 's/@/>/g' > ./AGGGTTT.fasta
grep -B 1 'AAACCCTAAACCCTAAACCCTAAACCCT' m64310e_230506_034722.hifi_reads.fastq | sed 's/@/>/g' > ./AAACCCT.fasta


**** blast
conda activate blast
makeblastdb -in AGGGTTT.fasta -dbtype nucl -out AGGGTTT_db
blastn -query query.fasta -db AGGGTTT_db -out results.txt -outfmt 6 -evalue 1e-5 -max_target_seqs 10 -num_threads 4

**** extract specific sequence from fasta
grep -A 1 "m64310e_230506_034722/132711129/ccs" AGGGTTT.fasta


**** download sequence from SRA using SRA Toolkit

bin/vdb-config -i

bin/fastq-dump SRRXXXXXXX


**** minimap2 alignment 

# Align PacBio long reads to the reference genome
minimap2 -ax map-pb -t 10 ./haden_modified.fasta /blue/xingbo.wu/jinli/mango/haden/haden_hicanu/m64310e_230506_034722.hifi_reads.fastq > aligned.sam

# Convert SAM to BAM format
samtools view -Sb aligned.sam > aligned.bam

# Sort the BAM file
samtools sort aligned.bam -o aligned.sorted.bam

# Index the sorted BAM file
samtools index aligned.sorted.bam

*** to get paf

minimap2 -x asm5 -c reference.fasta query.fasta > alignment.paf


*** dot plot visualization with paft in R

alignment <- read_paf("alignment.paf")

dotplot(alignment, label_seqs=TRUE, order_by="qstart") + theme_bw()


**** annotation

*** repeatmodeler + repeatmasker

# Set paths to your input files and output directories
INPUT_GENOME="haden_modified.fasta"
OUTPUT_DIR="Repeat_result"
DB_NAME="mango_haden"

# Step 1: Build the RepeatModeler database
BuildDatabase -name $DB_NAME -engine ncbi $INPUT_GENOME

# Step 2: Run RepeatModeler to build the custom repeat library
RepeatModeler -pa 60 -database $DB_NAME -LTRStruct 

# Step 3: Run RepeatMasker for masking small repeats
RepeatMasker -pa 60 \
-e rmblast -lib $DB_NAME-families.fa \
-xsmall -gff -dir $OUTPUT_DIR $INPUT_GENOME

*** edta repeats

EDTA.pl --genome haden_modified.fasta --sensitive 1 --anno 1 --evaluate 1 --threads 60 --force 1

** (try) -hardmask 0

** softmask 

RepeatMasker -pa 8 -lib haden_modified.fasta.mod.EDTA.TElib.fa -xsmall -dir ./softmask haden_modified.fasta

** alternate

conda create -n EDTA
conda activate EDTA
git clone https://github.com/oushujun/EDTA.git

perl ./EDTA/util/make_masked.pl -genome /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/edta/haden_modified.fasta -minlen 80 -hardmask 0 -t 2 -rmout /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/edta/haden_modified.fasta.mod.EDTA.anno/haden_modified.fasta.mod.EDTA.TEanno.out 

*** funannotate (failed) 

funannotate predict -i genome.fasta --species "Mango haden" --maker_gff my_previous_maker.gff

*** BRAKER 3

module load braker/3.0.8

export
AUGUSTUS_CONFIG_PATH=/blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/config

braker.pl --genome=/blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/haden_modified.fasta.masked --prot_seq=/blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/edta/funannotate/GWHEQCT00000000.Protein.faa --threads=$SLURM_CPUS_PER_TASK

** merge chr.fasta to genome.fasta

cat chr1.fasta chr2.fasta chr3.fasta chr4.fasta chr5.fasta chr6.fasta chr7.fasta chr8.fasta chr9.fasta chr10.fasta chr11.fasta chr12.fasta chr13.fasta chr14.fasta chr15.fasta chr16.fasta chr17.fasta chr18.fasta chr19.fasta chr20.fasta > combined.fasta




** rename chromosome name 

sed -i 's/>GWHEQCT00000001_RagTag/>Haden_Chr1/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000002_RagTag/>Haden_Chr2/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000003_RagTag/>Haden_Chr3/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000004_RagTag/>Haden_Chr4/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000005_RagTag/>Haden_Chr5/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000006_RagTag/>Haden_Chr6/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000007_RagTag/>Haden_Chr7/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000008_RagTag/>Haden_Chr8/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000009_RagTag/>Haden_Chr9/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000010_RagTag/>Haden_Chr10/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000011_RagTag/>Haden_Chr11/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000012_RagTag/>Haden_Chr12/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000013_RagTag/>Haden_Chr13/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000014_RagTag/>Haden_Chr14/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000015_RagTag/>Haden_Chr15/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000016_RagTag/>Haden_Chr16/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000017_RagTag/>Haden_Chr17/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000018_RagTag/>Haden_Chr18/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000019_RagTag/>Haden_Chr19/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000020_RagTag/>Haden_Chr20/' haden_modified.fasta.masked



**** agat_sq_stat_basic.pl gtf summary

module load agat

$ssembly/repeatmodeler/Repeat_result/braker3/haden_modified.fasta.masked -o mango_haden_gtf_agat_summary


**** busco 

** list all databases

busco --list-datasets

** run busco on protein fasta

busco -i /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/braker/braker.aa -l embryophyta_odb10 -o busco_output -m protein

**** quast

quast -o quast_output /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/haden_modified.fasta.masked

